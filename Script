/**
*
* Heat Map készítő szkript
*
* Ez a szkript minden nap, minden órájában kiszámítja az átlagos teljesítményt
* a hétről, és ezt hőtérképben és grafikonban adja ki egy Google-Sheetben.
* A konverziós arány alapján javasolt ajánlatkorrekciókat is végez.
*
**/

function main() {
  //////////////////////////////////////////////////////////////////////////////
  // Beállítások

  var spreadsheetUrl = "https://docs.google.com/Saját-Sheet-URL";
  // Annak a Google-dokumentumnak az URL-címe, amelybe az eredmények bekerülnek.
  // Másold ezt a sablont https://docs.google.com/spreadsheets/d/16kgdNXCrW1PIwN9HUfIBo4PQqhubGHw1ExnyJlkE02E/edit?usp=sharing
  // Így a megfelelő formázás és diagramok vannak beállítva.

  var dateRanges = ["2022-08-01,2022-10-31"];
  // Az adatok dátumtartományának kezdő és záró dátuma
  // Több tartomány is lehet, pl. ["2015-06-01,2015-07-31","2015-09-01,2015-10-31"]
  // 2022 júniusi, júliusi, szeptemberi és októberi adatokat kapna.
  // Az egyes tartományok formátuma "éééé-hh-nn, éééé-hh-nn" (ahol az első dátum a
  // a tartomány kezdete, a második pedig a vége).

  var ignoreDates = [];
  // Sorold fel azokat a napokat, amelyek a dátumtartományon belül vannak, de amelyek adatait nem
  // számításokhoz szeretnéd használni, például ha atipikus teljesítményük volt vagy
  // technikai problémák merültek fel a webhelyen.
  // pl. a ["2021-12-25","2021-11-28"] karácsonyi és Black Friday adatokat jelentene
  // 2021 figyelmen kívül marad.
  // Minden nap formátuma "éééé-hh-nn"
  // Ha nem akarod használni, akkor hagyd üresen a []-t.

  var fields = ["Impressions", "Clicks", "Conversions"];
  // Hőtérképet készít ezekről a mezőkről.
  // Engedélyezett mutatók: "Impressions", "Clicks", "Cost",
  // "Conversions", "ConversionValue"

  var calculatedFields = ["Clicks/Impressions", "Conversions/Clicks"];
  // Hőtérkép készítése egy statisztikáról, amelyet úgy számít ki, hogy egy mezőt eloszt a másikkal.
  // Például a „Clicks/Impressions” az átlagos kattintások számát osztva a következővel
  // átlagos megjelenítések (azaz a CTR).
  // Engedélyezett mezők: "Impressions", "Clicks", "Cost",
  // "Conversions", "ConversionValue"

  var campaignNameContains = "";
  // Használd ezt, ha csak néhány kampányt szeretnél megnézni
  // például a „Brand” vagy „Pmax” nevet tartalmazó kampányt.
  // Ha nem szeretnéd, akkor hagyd ""-ként.

  var campaignNameDoesNotContain = "";
  // Használd ezt, ha bizonyos kampányokat szeretnél kizárni
  // például a „Brand” vagy „Pmax” nevet tartalmazó kampányt.
  // Ha nem szeretnéd, akkor hagyd ""-ként.

  var ignorePausedCampaigns = true;
  // Állítsd ezt „true” értékre, ha csak a jelenleg aktív kampányokat szeretnéd látni.
  // Állítsd be „false” értékre, ha olyan kampányokat szeretnél látni, amelyeknek voltak megjelenítései, de jelenleg szünetelnek.



  //////////////////////////////////////////////////////////////////////////////
  // Haladó beállítások

  var smoothingWindow = [-2,   -1,   0,   1,    2   ];
  var smoothingWeight = [0.25, 0.75, 1,   0.75, 0.25];

  var maxBidMultiplierSuggestion = 0.35;
  var minBidMultiplierSuggestion = -0.35;
  // A javasolt ajánlati szorzók maximuma és minimuma.


  //////////////////////////////////////////////////////////////////////////////

  // Ellenőrizd a táblázat működését.
  try {
    var spreadsheet = SpreadsheetApp.openByUrl(spreadsheetUrl);
  } catch (e) {
    throw "Probléma van a táblázat URL-jével. Kérlek ellenőrizd, hogy megfelelően másolta-e be az URL-t. '" + e + "'";
  }

  // Ellenőrizd a mezőnevek helyességét
  var allowedFields = ["Conversions", "ConversionValue", "Impressions", "Clicks", "Cost"];
  var allowedFields_lowerCase = allowedFields.map(function (str){return str.toLowerCase()});
  var unrecognisedFields = [];

  for (var i=0; i<fields.length; i++) {
    var fieldIndex = allowedFields_lowerCase.indexOf(fields[i].toLowerCase().replace(" ","").trim());
    if(fieldIndex === -1){
      unrecognisedFields.push(fields[i]);
    }
    fields[i] = allowedFields[fieldIndex];
  }

  var calculatedFieldComponents = [];
  var unrecognisedCalculatedFields = [];
  for (var i=0; i<calculatedFields.length; i++) {
    if (calculatedFields[i].indexOf("/") === -1) {
      unrecognisedCalculatedFields.push(calculatedFields[i]);
      continue;
    }
    var components = calculatedFields[i].split("/");
    var toUse = [];
    for (var j=0; j<components.length; j++){
      components[j] = components[j].trim();
      var fieldIndex = allowedFields_lowerCase.indexOf(components[j].toLowerCase().replace(" ",""));
      if(fieldIndex === -1){
        unrecognisedCalculatedFields.push(components[j] + "' in '" + calculatedFields[i]);
      }
      toUse.push(allowedFields[fieldIndex]);
      if (fields.indexOf(allowedFields[fieldIndex]) === -1) {
        calculatedFieldComponents.push(allowedFields[fieldIndex]);
      }
    }
    calculatedFields[i] = toUse;
  }

  if (unrecognisedFields.length > 0 || unrecognisedCalculatedFields.length > 0) {
    throw unrecognisedFields.length + " field(s) and " + unrecognisedCalculatedFields.length +
      " calculated fields not recognised: '" + unrecognisedFields.concat(unrecognisedCalculatedFields).join("', '") +
        "'. Please choose from '" + allowedFields.join("', '") + "'.";
  }

  var allFields = fields.concat(calculatedFieldComponents);
  if (allFields.indexOf("Clicks") < 0) {
    allFields.push("Clicks");
  }
  if (allFields.indexOf("Conversions") < 0) {
    allFields.push("Conversions");
  }

  var dayNames = ["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"];
  var dailyData = {}
  var numberDays = {};
  var smoothedData = {};

  // Initialise data
  for (var d=0; d<dayNames.length; d++) {
    smoothedData[dayNames[d]] = {};
    numberDays[dayNames[d]] = 0;
    for (var h=0; h<24; h++) {
      smoothedData[dayNames[d]][h+""] = {};
      for (var f=0; f<allFields.length; f++) {
        smoothedData[dayNames[d]][h+""][allFields[f]] = 0;
      }
    }
  }

  // Készítsd el a jelentést
  if (ignorePausedCampaigns) {
    var whereStatements = "CampaignStatus = ENABLED ";
  } else {
    var whereStatements = "CampaignStatus IN ['ENABLED','PAUSED'] ";
  }

  if (campaignNameDoesNotContain != "") {
    whereStatements += "AND CampaignName DOES_NOT_CONTAIN_IGNORE_CASE '" + campaignNameDoesNotContain + "' ";
  }

  if (campaignNameContains != "") {
    whereStatements += "AND CampaignName CONTAINS_IGNORE_CASE '" + campaignNameContains + "' ";
  }

  for (var d=0; d<dateRanges.length; d++) {
    var report = AdWordsApp.report("SELECT DayOfWeek, Date, HourOfDay, " + allFields.join(", ") + " " +
      "FROM CAMPAIGN_PERFORMANCE_REPORT " +
        "WHERE " + whereStatements +
          "DURING " + dateRanges[d].replace(/-/g,"")
          );

    var rows = report.rows();
    while (rows.hasNext()) {
      var row = rows.next();
      if (ignoreDates.indexOf(row["Date"]) > -1) {
        continue;
      }
      if (dailyData[row["Date"]] == undefined) {
        dailyData[row["Date"]] = {};
        dailyData[row["Date"]]["Day"] = row["DayOfWeek"];
        for (var h=0; h<24; h++) {
          dailyData[row["Date"]][h+""] = {};
          for (var f=0; f<allFields.length; f++) {
            dailyData[row["Date"]][h+""][allFields[f]] = 0;
          }
        }
      }

      for (var f=0; f<allFields.length; f++) {
        dailyData[row["Date"]][row["HourOfDay"]][allFields[f]] += parseInt(row[allFields[f]].replace(/,/g,""),10);
      }
    } // vége

  }// Az adattartományok vége


  // A napi adatok a hét minden napjára kiegyenlítve és összesítésre kerülnek
  for (var date in dailyData) {
    var day = dailyData[date]["Day"];
    numberDays[day]++;

    var dateBits = date.split("-");
    var yesterday = new Date(dateBits[0],parseInt(dateBits[1],10)-1,parseInt(dateBits[2],10)-1);
    var tomorrow = new Date(dateBits[0],parseInt(dateBits[1],10)-1,parseInt(dateBits[2],10)+1);
    yesterday = Utilities.formatDate(yesterday, "UTC", "yyyy-MM-dd");
    tomorrow = Utilities.formatDate(tomorrow, "UTC", "yyyy-MM-dd");

    for (var h=0; h<24; h++) {

      for (var f=0; f<allFields.length; f++) {
        var totalWeight = 0;
        var smoothedTotal = 0;

        for (var w=0; w<smoothingWindow.length; w++) {
          if (h + smoothingWindow[w] < 0) {
            if (dailyData[yesterday] != undefined) {
              totalWeight += smoothingWeight[w];
              smoothedTotal += smoothingWeight[w] * dailyData[yesterday][(h + smoothingWindow[w] + 24)][allFields[f]];
            }
          } else if (h + smoothingWindow[w] > 23) {
            if (dailyData[tomorrow] != undefined) {
              totalWeight += smoothingWeight[w];
              smoothedTotal += smoothingWeight[w] * dailyData[tomorrow][(h + smoothingWindow[w] - 24)][allFields[f]];
            }
          } else {
            totalWeight += smoothingWeight[w];
            smoothedTotal += smoothingWeight[w] * dailyData[date][(h + smoothingWindow[w])][allFields[f]];
          }
        }
        if (totalWeight != 0) {
          smoothedData[day][h][allFields[f]] += smoothedTotal / totalWeight;
        }
      }
    }
  } // vége a napi jelentésnek
  Logger.log("Collected daily data.");


  // Számítsd ki az átlagokat a sima adatokból!
  var hourlyAvg = {};
  var totalConversions = 0;
  var totalClicks = 0;
  for (var d=0; d<dayNames.length; d++) {
    hourlyAvg[dayNames[d]] = {};
    for (var h=0; h<24; h++) {
      hourlyAvg[dayNames[d]][h+""] = {}

      if (numberDays[dayNames[d]] == 0) {
        for (var f=0; f<allFields.length; f++) {
          hourlyAvg[dayNames[d]][h+""][allFields[f]] = "-";
        }
        continue;
      }

      for (var f=0; f<allFields.length; f++) {
        hourlyAvg[dayNames[d]][h+""][allFields[f]] = smoothedData[dayNames[d]][h+""][allFields[f]]/numberDays[dayNames[d]];
      }

      for (var c=0; c<calculatedFields.length; c++) {

        var multiplier = smoothedData[dayNames[d]][h+""][calculatedFields[c][0]];
        var divisor = smoothedData[dayNames[d]][h+""][calculatedFields[c][1]];

        if (divisor == 0 || divisor == "-" || multiplier == "-") {
          hourlyAvg[dayNames[d]][h+""][calculatedFields[c].join("/")] = "-";
        } else {
          hourlyAvg[dayNames[d]][h+""][calculatedFields[c].join("/")] = multiplier / divisor;
        }
      }

      // Add össze a kattintásokat és a konverziókat a javasolt ajánlattételi szorzók generálásához
      totalConversions += smoothedData[dayNames[d]][h+""]["Conversions"];
      totalClicks += smoothedData[dayNames[d]][h+""]["Clicks"];
    }
  }

  // A javasolt ajánlattételi szorzók kiszámítása a konverziós arány alapján
  if (totalClicks == 0) {
    var meanConvRate = 0;
  } else {
    var meanConvRate = totalConversions / totalClicks;
  }

  for (var d=0; d<dayNames.length; d++) {
    for (var h=0; h<24; h++) {

      if (meanConvRate == 0 || smoothedData[dayNames[d]][h+""]["Clicks"] == 0) {
        hourlyAvg[dayNames[d]][h+""]["BiddingMultipliers"] = "-";
      } else {
        var convRate = smoothedData[dayNames[d]][h+""]["Conversions"] / smoothedData[dayNames[d]][h+""]["Clicks"];

  // A javasolt szorzót az átlagból állítjuk elő.
  // A négyzetgyök felvételével szabályozhatod.
        var multiplier = Math.sqrt(convRate/meanConvRate)-1;

        if (multiplier > maxBidMultiplierSuggestion) {
          multiplier = maxBidMultiplierSuggestion;
        } else if (multiplier < minBidMultiplierSuggestion) {
          multiplier = minBidMultiplierSuggestion;
        }
        hourlyAvg[dayNames[d]][h+""]["BiddingMultipliers"] = multiplier;
      }

    }
  }

  Logger.log("Averaged and smoothed data.");

  // Készítsd el a hőtérképeket a Sheetben
  var sheet0 = spreadsheet.getSheets()[0];
  var calculatedFieldNames = calculatedFields.map(function (arr){return arr.join("/")});
  var allFieldNames = fields.concat(calculatedFieldNames,["BiddingMultipliers"]);
  if (sheet0.getName() == "Template") {
   sheet0.setName(allFieldNames[0].replace(/[A-Z\/]/g, function (x){return " " + x;}).trim());
  }

  for (var f=0; f<allFieldNames.length; f++) {
    var fieldName = allFieldNames[f].replace(/[A-Z\/]/g, function (x){return " " + x;}).trim();
    var sheet = spreadsheet.getSheetByName(fieldName);
    if (sheet == null) {
      sheet = sheet0.copyTo(spreadsheet);
      sheet.setName(fieldName);
    }
    sheet.getRange(1, 1).setValue(fieldName);

    //Tedd közzé a hőtérkép adatait
    var sheetData = [];
    sheetData.push([""].concat(dayNames)); // Címsor
    var totalValue = 0;
    for (var h=0; h<24; h++) {
      var rowData = [h];
      for (var d=0; d<dayNames.length; d++) {
        if (hourlyAvg[dayNames[d]][h+""][allFieldNames[f]] == undefined) {
          rowData.push("-");
        } else {
          rowData.push(hourlyAvg[dayNames[d]][h+""][allFieldNames[f]]);
        }
        totalValue += hourlyAvg[dayNames[d]][h+""][allFieldNames[f]];
      }
      sheetData.push(rowData);
    }
    sheet.getRange(3, 1, sheetData.length, sheetData[0].length).setValues(sheetData);

    // Döntsd el, melyik formátumot használja, és formázza a hőtérképen / -Számok- /
    var averageValue = totalValue / (24*7);
    if (averageValue < 50) {
      var format = "#,##0.00";
    } else {
      var format = "#,##0";
    }
    if (allFieldNames[f].indexOf("/") > -1) {
      var components = allFieldNames[f].split("/");
      var multiplierIsMoney = (components[0] == "Cost" || components[0] == "ConversionValue");
      var divisorIsMoney = (components[1] == "Cost" || components[1] == "ConversionValue");
      if ((!multiplierIsMoney && !divisorIsMoney) || (multiplierIsMoney && divisorIsMoney)) {
        // Ha egyik komponens sem monetáris, vagy mindkét komponens az, akkor az eredmény százalékos
        format = "#,##0.00%";
      }
    }
    if (allFieldNames[f] == "BiddingMultipliers") {
      format = "#,##0.00%";
    }
    var numberFormats = [];
    for (var i=0; i<24; i++) {
      var formatRow = [];
      for (var j=0; j<7; j++) {
        formatRow.push(format);
      }
      numberFormats.push(formatRow);
    }
    sheet.getRange(4, 2, numberFormats.length, numberFormats[0].length).setNumberFormats(numberFormats);

    // Frissítsd a diagram címét
    var charts = sheet.getCharts();
    if (sheet.getCharts().length === 0) {
      Logger.log("Warning: chart missing from the " + fieldName + " sheet.");
    } else {
      var chart = charts[0];
      chart = chart.modify().setOption('title', fieldName).build();
      sheet.updateChart(chart);
    }
  }

  Logger.log("Posted data to spreadsheet.");
  Logger.log("Finished.");
  
  }
